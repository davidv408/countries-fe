{"ast":null,"code":"var _jsxFileName = \"/Users/davidvu/Library/Mobile Documents/com~apple~CloudDocs/countries-fe/src/home-view/HomeView.tsx\",\n  _s = $RefreshSig$();\nimport { ThemeContext, ViewMode } from \"../App\";\nimport React from \"react\";\nimport \"./HomeView.css\";\nimport { FilterByCountryNameInput } from \"./FilterByCountryNameInput\";\nimport { CountryList } from \"./CountryList\";\nimport { FilterByRegionDropdown } from \"./FilterByRegionDropdown\";\nimport { Header } from \"../shared/Header\";\nimport { LoadingPage } from \"../shared/LoadingPage\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const HomeView = () => {\n  _s();\n  const {\n    viewMode\n  } = React.useContext(ThemeContext);\n  const [isDoneLoading, setIsDoneLoading] = React.useState(false);\n  const [searchText, setSearchText] = React.useState(\"\");\n  const [regionFilter, setRegionFilter] = React.useState(\"\");\n  const [allCountries, setAllCountries] = React.useState(null);\n\n  /**\n   * Add an event listener for when the page is done loading, use that as an indication\n   * whether or not to show a loading page.\n   * Fetch from /countries/.\n   * Remove the event listeners when component unmounts.\n   */\n  React.useEffect(() => {\n    const onPageLoad = () => {\n      setIsDoneLoading(true);\n    };\n    if (document.readyState === \"complete\") {\n      onPageLoad();\n    } else {\n      window.addEventListener(\"load\", onPageLoad, false);\n    }\n    void (async () => {\n      try {\n        const response = await fetch(\"http://localhost:3001/countries\");\n        const data = await response.json();\n        setAllCountries(data);\n      } catch (e) {\n        console.log(\"Error: \", e);\n      }\n    })();\n    return () => window.removeEventListener(\"load\", onPageLoad);\n  }, []);\n\n  /** Get the unique set of Region names */\n  const regions = React.useMemo(() => {\n    if (!allCountries) {\n      return;\n    }\n    const set = new Set();\n    for (const country of allCountries) {\n      set.add(country.region);\n    }\n    return Array.from(set);\n  }, [allCountries]);\n\n  /* When searchText or regionFilter changes, re-compute the filteredCountries list */\n  const filteredCountries = React.useMemo(() => {\n    if (!allCountries) {\n      return;\n    }\n    const searchTextUpperCase = searchText.toUpperCase();\n    const regionFilterUpperCase = regionFilter.toUpperCase();\n    return allCountries.filter(country => {\n      return country.name.toUpperCase().includes(searchTextUpperCase) && country.region.toUpperCase().includes(regionFilterUpperCase);\n    });\n  }, [allCountries, searchText, regionFilter]);\n  if (!isDoneLoading || !allCountries || !regions || !filteredCountries) {\n    return /*#__PURE__*/_jsxDEV(LoadingPage, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `home-view ${viewMode === ViewMode.DARK ? \"dark-mode\" : \"\"}`,\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"filters\",\n      children: [/*#__PURE__*/_jsxDEV(FilterByCountryNameInput, {\n        setSearchText: setSearchText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FilterByRegionDropdown, {\n        regions: regions,\n        setRegionFilter: setRegionFilter\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CountryList, {\n      filteredCountries: filteredCountries\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 5\n  }, this);\n};\n_s(HomeView, \"+Dd2OD62zrHhjtHCg93lyBVkTu8=\");\n_c = HomeView;\nvar _c;\n$RefreshReg$(_c, \"HomeView\");","map":{"version":3,"names":["ThemeContext","ViewMode","React","FilterByCountryNameInput","CountryList","FilterByRegionDropdown","Header","LoadingPage","HomeView","viewMode","useContext","isDoneLoading","setIsDoneLoading","useState","searchText","setSearchText","regionFilter","setRegionFilter","allCountries","setAllCountries","useEffect","onPageLoad","document","readyState","window","addEventListener","response","fetch","data","json","e","console","log","removeEventListener","regions","useMemo","set","Set","country","add","region","Array","from","filteredCountries","searchTextUpperCase","toUpperCase","regionFilterUpperCase","filter","name","includes","DARK"],"sources":["/Users/davidvu/Library/Mobile Documents/com~apple~CloudDocs/countries-fe/src/home-view/HomeView.tsx"],"sourcesContent":["import { Country, ThemeContext, ViewMode } from \"../App\";\nimport React from \"react\";\nimport \"./HomeView.css\";\nimport { FilterByCountryNameInput } from \"./FilterByCountryNameInput\";\nimport { CountryList } from \"./CountryList\";\nimport { FilterByRegionDropdown } from \"./FilterByRegionDropdown\";\nimport { Header } from \"../shared/Header\";\nimport { LoadingPage } from \"../shared/LoadingPage\";\n\nexport const HomeView: React.FC = () => {\n  const { viewMode } = React.useContext(ThemeContext);\n  const [isDoneLoading, setIsDoneLoading] = React.useState(false);\n  const [searchText, setSearchText] = React.useState(\"\");\n  const [regionFilter, setRegionFilter] = React.useState(\"\");\n  const [allCountries, setAllCountries] = React.useState<null | Country[]>(\n    null\n  );\n\n  /**\n   * Add an event listener for when the page is done loading, use that as an indication\n   * whether or not to show a loading page.\n   * Fetch from /countries/.\n   * Remove the event listeners when component unmounts.\n   */\n  React.useEffect(() => {\n    const onPageLoad = () => {\n      setIsDoneLoading(true);\n    };\n\n    if (document.readyState === \"complete\") {\n      onPageLoad();\n    } else {\n      window.addEventListener(\"load\", onPageLoad, false);\n    }\n\n    void (async () => {\n      try {\n        const response = await fetch(\"http://localhost:3001/countries\");\n        const data = await response.json();\n        setAllCountries(data);\n      } catch (e) {\n        console.log(\"Error: \", e);\n      }\n    })();\n\n    return () => window.removeEventListener(\"load\", onPageLoad);\n  }, []);\n\n  /** Get the unique set of Region names */\n  const regions = React.useMemo(() => {\n    if (!allCountries) {\n      return;\n    }\n\n    const set = new Set<string>();\n    for (const country of allCountries) {\n      set.add(country.region);\n    }\n    return Array.from(set);\n  }, [allCountries]);\n\n  /* When searchText or regionFilter changes, re-compute the filteredCountries list */\n  const filteredCountries = React.useMemo(() => {\n    if (!allCountries) {\n      return;\n    }\n\n    const searchTextUpperCase = searchText.toUpperCase();\n    const regionFilterUpperCase = regionFilter.toUpperCase();\n\n    return allCountries.filter((country) => {\n      return (\n        country.name.toUpperCase().includes(searchTextUpperCase) &&\n        country.region.toUpperCase().includes(regionFilterUpperCase)\n      );\n    });\n  }, [allCountries, searchText, regionFilter]);\n\n  if (!isDoneLoading || !allCountries || !regions || !filteredCountries) {\n    return <LoadingPage />;\n  }\n\n  return (\n    <div\n      className={`home-view ${viewMode === ViewMode.DARK ? \"dark-mode\" : \"\"}`}\n    >\n      <Header />\n      <div className=\"filters\">\n        <FilterByCountryNameInput setSearchText={setSearchText} />\n        <FilterByRegionDropdown\n          regions={regions}\n          setRegionFilter={setRegionFilter}\n        />\n      </div>\n      <CountryList filteredCountries={filteredCountries} />\n    </div>\n  );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}